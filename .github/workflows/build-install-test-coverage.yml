name: Build, Install, Test, and Coverage

on:
    push:
      branches: [ "main" ]
    pull_request:
      branches: [ "main" ]
    workflow_dispatch:

jobs:

  build_install_test_coverage:
      runs-on: ubuntu-latest

      strategy:
        fail-fast: false

        matrix:
          python-version: [3.9]
          algebra: ['builtin', 'mkl']
          float: ['OFF', 'ON']
          long: ['OFF', 'ON']
          exclude:
            - algebra: 'mkl'
              float: 'ON'

      name: ${{ matrix.algebra }} algebra, ${{ matrix.float == 'ON' && 'single' || 'double' }}, ${{ matrix.long == 'ON' && 'long' || 'int' }}

      defaults:
        run:
          # Required when using an activated conda environment in steps
          # See https://github.com/conda-incubator/setup-miniconda#IMPORTANT
          shell: bash -l {0}

      env:
        OSQP_BUILD_DIR_PREFIX: ${{ github.workspace }}/build
        OSQP_INSTALL_PREFIX: ${{ github.workspace }}/../install
        CTEST_OUTPUT_ON_FAILURE: 1

      steps:
        - uses: actions/checkout@v4
          with:
            lfs: false
            submodules: recursive

        - name: Set up conda environment for testing
          uses: conda-incubator/setup-miniconda@v3
          with:
            auto-update-conda: true
            python-version: ${{ matrix.python-version }}
            activate-environment: osqp-test
            environment-file: tests/testenv.yml
            auto-activate-base: false

        # -----------------
        # OS-specific setup
        # -----------------
        - name: Setup (Linux)
          if: runner.os == 'Linux'
          run: |
            echo "LD_LIBRARY_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV
            conda install -c conda-forge libstdcxx-ng

        - name: Install MKL
          if: matrix.algebra == 'mkl'
          run: |
            conda install -c https://software.repos.intel.com/python/conda/ mkl-devel
            conda info
            conda list

        - name: Install Python dependencies
          run: |
            pip install numpy scipy

        - name: Prep install directory
          run: |
            mkdir -p $OSQP_INSTALL_PREFIX

        - name: Build with coverage support
          run: |
            cmake -G "Unix Makefiles" \
                  -S . -B $OSQP_BUILD_DIR_PREFIX \
                  -DCMAKE_INSTALL_PREFIX=$OSQP_INSTALL_PREFIX \
                  -DCMAKE_C_FLAGS="-fprofile-arcs -ftest-coverage" \
                  -DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage" \
                  -DOSQP_BUILD_UNITTESTS=ON 
            cmake --build $OSQP_BUILD_DIR_PREFIX

        - name: Install to prefix
          run: |
            cmake --install $OSQP_BUILD_DIR_PREFIX

        - name: Run tests
          run: |
            cmake --build $OSQP_BUILD_DIR_PREFIX --target test

        # Test the executables can link using the installed CMake
        - name: OSQP Link Test
          run: |
            cmake -G "Unix Makefiles" -S tests/CMakeInstallTests -B tests/build -DOSQP_INSTALL_PREFIX=$OSQP_INSTALL_PREFIX
            cmake --build tests/build
            ./tests/build/osqp_static
            ./tests/build/osqp_shared

        # Test that the CMake version check passes
        - name: OSQP Supported Version Test
          run: |
            cmake -G "Unix Makefiles" -S tests/CMakeInstallTests -B tests/build -DOSQP_INSTALL_PREFIX=$OSQP_INSTALL_PREFIX -DOSQP_DESIRED_VERSION=0.99

        # Test that the CMake version check fails
        - name: OSQP Supported Version Test (should fail)
          run: |
            ! cmake -G "Unix Makefiles" -S tests/CMakeInstallTests -B tests/build -DOSQP_INSTALL_PREFIX=$OSQP_INSTALL_PREFIX -DOSQP_DESIRED_VERSION=1.0

        - name: Generate coverage
          uses: imciner2/run-lcov@v1.1
          with:
            input_directory: '${{ env.OSQP_BUILD_DIR_PREFIX }}'
            exclude: '"$GITHUB_WORKSPACE/tests/*" "$GITHUB_WORKSPACE/algebra/_common/lin_sys/qdldl/amd/*" "$GITHUB_WORKSPACE/build/*" "/usr/include/*"'
            output_file: '${{ env.OSQP_BUILD_DIR_PREFIX }}/coverage.info'

        - name: Coveralls upload
          uses: coverallsapp/github-action@master
          with:
            path-to-lcov: '${{ env.OSQP_BUILD_DIR_PREFIX }}/coverage.info'
            github-token: ${{ secrets.GITHUB_TOKEN }}
            flag-name: run-${{ matrix.algebra }}-${{ matrix.float }}-${{ matrix.long }}
            parallel: true

  finalize_coverage:
    needs: build_install_test_coverage
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true
